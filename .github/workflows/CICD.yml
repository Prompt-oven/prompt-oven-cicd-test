name: Node.js CI/CD

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, reopened]
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [ 20.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.2
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ matrix.node-version }}-${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.node-version }}-${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Cache Turbo build
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ matrix.node-version }}-${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ matrix.node-version }}-${{ runner.os }}-turbo-
      
      - name: make .env for proper build
        run: |
          touch .env
          echo '${{ secrets.PROPERTIES_PROD }}' > apps/client/.env
          echo '${{ secrets.PROPERTIES_PROD }}' > apps/admin/.env
        shell: bash
      
      - name: Build_apps
        run: pnpm turbo build
      
      - name: Save client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          include-hidden-files: 'true'
          path: ./apps/client/.next
      
      - name: Save admin build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: admin-build
          include-hidden-files: 'true'
          path: ./apps/admin/.next
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download client build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: ./apps/client/.next
      
      - name: Download admin build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: ./apps/admin/.next
      
      - name: Docker build for client
        run: docker build -f Dockerfile.client -t ${{ secrets.DOCKERHUB_USERNAME }}/client-app .
      
      - name: Docker build for admin
        run: docker build -f Dockerfile.admin -t ${{ secrets.DOCKERHUB_USERNAME }}/admin-app .
      
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Docker push (Client)
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/client-app
      
      - name: Docker push (Admin)
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/admin-app
      
      - name: Deploy client to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_FE_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          timeout: 60s
          script: |
            echo "Stopping existing client container..."
            sudo docker stop client-app || true
            sudo docker rm client-app || true
            
            echo "Pulling latest client image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/client-app:latest
            
            echo "Running client container..."
            sudo docker run -d --name client-app -p 3001:3001 ${{ secrets.DOCKERHUB_USERNAME }}/client-app:latest
      
      - name: Deploy admin to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_FE_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          timeout: 60s
          script: |
            echo "Stopping existing admin container..."
            sudo docker stop admin-app || true
            sudo docker rm admin-app || true
            
            echo "Pulling latest admin image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/admin-app:latest
            
            echo "Running admin container..."
            sudo docker run -d --name admin-app -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/admin-app:latest